package com.example.dell.movielove;

import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;


public class FetchMoviePoster extends AsyncTask<String, Void, Bundle> {
    String choice;
    String[] resultStrs;
    String[] movie_title;
    String[] movie_plot;
    String[] user_rating;
    String[] release_date;
    Handler handler;
    private final String LOG_TAG = FetchMoviePoster.class.getSimpleName();
    Bundle b=new Bundle();
public FetchMoviePoster(Handler h){
    handler=h;

}
    @Override
    protected Bundle doInBackground(String... code) {
        Bundle bundle_ret = new Bundle();
        HttpURLConnection urlConnection = null;
        BufferedReader reader = null;
        String[] image_poster = new String[0];
        String API = "api_key";
        String SORT="sort_by";

        choice=code[0];
        String forecastJsonStr = null;

        try {
            Uri fetch_url = Uri.parse("http://api.themoviedb.org/3/discover/movie?");
            Uri builder = fetch_url.buildUpon().
                    appendQueryParameter(SORT,choice)
                    .appendQueryParameter(API, BuildConfig.THE_MOVIE_DB_API_KEY).build();
            URL url = new URL(builder.toString());



            urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setRequestMethod("GET");
            urlConnection.connect();

            InputStream inputStream = urlConnection.getInputStream();
            StringBuffer buffer = new StringBuffer();
            if (inputStream == null) {
                // Nothing to do.
                return null;
            }
            reader = new BufferedReader(new InputStreamReader(inputStream));

            String line;
            while ((line = reader.readLine()) != null) {
                buffer.append(line + "/n");
            }

            if (buffer.length() == 0) {
                return null;
            }
            forecastJsonStr = buffer.toString();


            try {
                bundle_ret = getUrlForImage(forecastJsonStr);

            } catch (JSONException e) {
                e.printStackTrace();
            }


        } catch (IOException e) {
            Log.e(LOG_TAG, "Error ", e);
            // If the code didn't successfully get the weather data, there's no point in attempting
            // to parse it.
            forecastJsonStr = null;
        } finally {
            if (urlConnection != null) {
                urlConnection.disconnect();
            }
            if (reader != null) {
                try {
                    reader.close();
                } catch (final IOException e) {
                    Log.e(LOG_TAG, "Error closing stream", e);
                }
            }
        }
        return bundle_ret;
    }

    private Bundle getUrlForImage(String forecastJsonStr) throws JSONException {
        final String OWM_POSTER = "results";
        final String FILE_PATH = "poster_path";
        final String ORIGINAL_TITLE="original_title";
        final String OVERVIEW="overview";
        final String User_RATING="vote_average";
        final String RELEASE="release_date";

        JSONObject forecastJson = new JSONObject(forecastJsonStr);
        JSONArray movieArray = forecastJson.getJSONArray(OWM_POSTER);
        resultStrs = new String[movieArray.length()];
        movie_title=new String[movieArray.length()];
        movie_plot=new String[movieArray.length()];
        user_rating=new String[movieArray.length()];
        release_date=new String[movieArray.length()];
        for (int i = 0; i < movieArray.length(); i++) {

            JSONObject movie = movieArray.getJSONObject(i);

            String file_name = movie.getString(FILE_PATH);
            String title=movie.getString(ORIGINAL_TITLE);
            String plot=movie.getString(OVERVIEW);
            String userRating=movie.getString(User_RATING);
            String release=movie.getString(RELEASE);
            resultStrs[i] = "http://image.tmdb.org/t/p/w185/" +file_name;
            movie_title[i]=title;
            movie_plot[i]=plot;
            user_rating[i]= userRating;
            release_date[i]=release;
        }
        b.putStringArray("result",resultStrs);
        b.putStringArray("movie_title",movie_title);
        b.putStringArray("movie_plot",movie_plot);
        b.putStringArray("user_rating",user_rating);
        b.putStringArray("release date",release_date);

        return b;
    }

    @Override
    protected void onPostExecute(Bundle bundle_ret) {
        if (resultStrs != null) {
            Message message=Message.obtain();

            message.setData(bundle_ret);
            handler.sendMessage(message);




        }

    }
}
